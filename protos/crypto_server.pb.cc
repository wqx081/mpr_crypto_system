// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crypto_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace crypto {

namespace {

const ::google::protobuf::Descriptor* CreateCbcKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCbcKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCbcKeyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCbcKeyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CbcEncryptFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CbcEncryptFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CbcEncryptFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CbcEncryptFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CbcDecryptFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CbcDecryptFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CbcDecryptFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CbcDecryptFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateKeyPairRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateKeyPairRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateKeyPairResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateKeyPairResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicKeyEncryptRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicKeyEncryptRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicKeyEncryptResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicKeyEncryptResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateKeyDecryptRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateKeyDecryptRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateKeyDecryptResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateKeyDecryptResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SymmetricKeyBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AsymmetricType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AsymmetricKeyBits_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_crypto_5fserver_2eproto() {
  protobuf_AddDesc_crypto_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "crypto_server.proto");
  GOOGLE_CHECK(file != NULL);
  CreateCbcKeyRequest_descriptor_ = file->message_type(0);
  static const int CreateCbcKeyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCbcKeyRequest, key_bits_),
  };
  CreateCbcKeyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateCbcKeyRequest_descriptor_,
      CreateCbcKeyRequest::default_instance_,
      CreateCbcKeyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateCbcKeyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCbcKeyRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCbcKeyRequest, _is_default_instance_));
  CreateCbcKeyResponse_descriptor_ = file->message_type(1);
  static const int CreateCbcKeyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCbcKeyResponse, key_),
  };
  CreateCbcKeyResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateCbcKeyResponse_descriptor_,
      CreateCbcKeyResponse::default_instance_,
      CreateCbcKeyResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateCbcKeyResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCbcKeyResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCbcKeyResponse, _is_default_instance_));
  CbcEncryptFileRequest_descriptor_ = file->message_type(2);
  static const int CbcEncryptFileRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileRequest, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileRequest, file_path_),
  };
  CbcEncryptFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CbcEncryptFileRequest_descriptor_,
      CbcEncryptFileRequest::default_instance_,
      CbcEncryptFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CbcEncryptFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileRequest, _is_default_instance_));
  CbcEncryptFileResponse_descriptor_ = file->message_type(3);
  static const int CbcEncryptFileResponse_offsets_[1] = {
  };
  CbcEncryptFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CbcEncryptFileResponse_descriptor_,
      CbcEncryptFileResponse::default_instance_,
      CbcEncryptFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CbcEncryptFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcEncryptFileResponse, _is_default_instance_));
  CbcDecryptFileRequest_descriptor_ = file->message_type(4);
  static const int CbcDecryptFileRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileRequest, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileRequest, file_path_),
  };
  CbcDecryptFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CbcDecryptFileRequest_descriptor_,
      CbcDecryptFileRequest::default_instance_,
      CbcDecryptFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CbcDecryptFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileRequest, _is_default_instance_));
  CbcDecryptFileResponse_descriptor_ = file->message_type(5);
  static const int CbcDecryptFileResponse_offsets_[1] = {
  };
  CbcDecryptFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CbcDecryptFileResponse_descriptor_,
      CbcDecryptFileResponse::default_instance_,
      CbcDecryptFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CbcDecryptFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CbcDecryptFileResponse, _is_default_instance_));
  CreateKeyPairRequest_descriptor_ = file->message_type(6);
  static const int CreateKeyPairRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairRequest, key_bits_),
  };
  CreateKeyPairRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateKeyPairRequest_descriptor_,
      CreateKeyPairRequest::default_instance_,
      CreateKeyPairRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateKeyPairRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairRequest, _is_default_instance_));
  CreateKeyPairResponse_descriptor_ = file->message_type(7);
  static const int CreateKeyPairResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairResponse, private_key_),
  };
  CreateKeyPairResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateKeyPairResponse_descriptor_,
      CreateKeyPairResponse::default_instance_,
      CreateKeyPairResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateKeyPairResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateKeyPairResponse, _is_default_instance_));
  PublicKeyEncryptRequest_descriptor_ = file->message_type(8);
  static const int PublicKeyEncryptRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptRequest, plaintext_),
  };
  PublicKeyEncryptRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PublicKeyEncryptRequest_descriptor_,
      PublicKeyEncryptRequest::default_instance_,
      PublicKeyEncryptRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PublicKeyEncryptRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptRequest, _is_default_instance_));
  PublicKeyEncryptResponse_descriptor_ = file->message_type(9);
  static const int PublicKeyEncryptResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptResponse, cipher_),
  };
  PublicKeyEncryptResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PublicKeyEncryptResponse_descriptor_,
      PublicKeyEncryptResponse::default_instance_,
      PublicKeyEncryptResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PublicKeyEncryptResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKeyEncryptResponse, _is_default_instance_));
  PrivateKeyDecryptRequest_descriptor_ = file->message_type(10);
  static const int PrivateKeyDecryptRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptRequest, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptRequest, cipher_),
  };
  PrivateKeyDecryptRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrivateKeyDecryptRequest_descriptor_,
      PrivateKeyDecryptRequest::default_instance_,
      PrivateKeyDecryptRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrivateKeyDecryptRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptRequest, _is_default_instance_));
  PrivateKeyDecryptResponse_descriptor_ = file->message_type(11);
  static const int PrivateKeyDecryptResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptResponse, plaintext_),
  };
  PrivateKeyDecryptResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrivateKeyDecryptResponse_descriptor_,
      PrivateKeyDecryptResponse::default_instance_,
      PrivateKeyDecryptResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrivateKeyDecryptResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyDecryptResponse, _is_default_instance_));
  SymmetricKeyBits_descriptor_ = file->enum_type(0);
  AsymmetricType_descriptor_ = file->enum_type(1);
  AsymmetricKeyBits_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_crypto_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateCbcKeyRequest_descriptor_, &CreateCbcKeyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateCbcKeyResponse_descriptor_, &CreateCbcKeyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CbcEncryptFileRequest_descriptor_, &CbcEncryptFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CbcEncryptFileResponse_descriptor_, &CbcEncryptFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CbcDecryptFileRequest_descriptor_, &CbcDecryptFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CbcDecryptFileResponse_descriptor_, &CbcDecryptFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateKeyPairRequest_descriptor_, &CreateKeyPairRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateKeyPairResponse_descriptor_, &CreateKeyPairResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PublicKeyEncryptRequest_descriptor_, &PublicKeyEncryptRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PublicKeyEncryptResponse_descriptor_, &PublicKeyEncryptResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrivateKeyDecryptRequest_descriptor_, &PrivateKeyDecryptRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrivateKeyDecryptResponse_descriptor_, &PrivateKeyDecryptResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_crypto_5fserver_2eproto() {
  delete CreateCbcKeyRequest::default_instance_;
  delete CreateCbcKeyRequest_reflection_;
  delete CreateCbcKeyResponse::default_instance_;
  delete CreateCbcKeyResponse_reflection_;
  delete CbcEncryptFileRequest::default_instance_;
  delete CbcEncryptFileRequest_reflection_;
  delete CbcEncryptFileResponse::default_instance_;
  delete CbcEncryptFileResponse_reflection_;
  delete CbcDecryptFileRequest::default_instance_;
  delete CbcDecryptFileRequest_reflection_;
  delete CbcDecryptFileResponse::default_instance_;
  delete CbcDecryptFileResponse_reflection_;
  delete CreateKeyPairRequest::default_instance_;
  delete CreateKeyPairRequest_reflection_;
  delete CreateKeyPairResponse::default_instance_;
  delete CreateKeyPairResponse_reflection_;
  delete PublicKeyEncryptRequest::default_instance_;
  delete PublicKeyEncryptRequest_reflection_;
  delete PublicKeyEncryptResponse::default_instance_;
  delete PublicKeyEncryptResponse_reflection_;
  delete PrivateKeyDecryptRequest::default_instance_;
  delete PrivateKeyDecryptRequest_reflection_;
  delete PrivateKeyDecryptResponse::default_instance_;
  delete PrivateKeyDecryptResponse_reflection_;
}

void protobuf_AddDesc_crypto_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023crypto_server.proto\022\006crypto\"A\n\023CreateC"
    "bcKeyRequest\022*\n\010key_bits\030\001 \001(\0162\030.crypto."
    "SymmetricKeyBits\"#\n\024CreateCbcKeyResponse"
    "\022\013\n\003key\030\001 \001(\t\"C\n\025CbcEncryptFileRequest\022\013"
    "\n\003key\030\001 \001(\t\022\n\n\002iv\030\002 \001(\t\022\021\n\tfile_path\030\003 \001"
    "(\t\"\030\n\026CbcEncryptFileResponse\"C\n\025CbcDecry"
    "ptFileRequest\022\013\n\003key\030\001 \001(\t\022\n\n\002iv\030\002 \001(\t\022\021"
    "\n\tfile_path\030\003 \001(\t\"\030\n\026CbcDecryptFileRespo"
    "nse\"i\n\024CreateKeyPairRequest\022$\n\004type\030\001 \001("
    "\0162\026.crypto.AsymmetricType\022+\n\010key_bits\030\002 "
    "\001(\0162\031.crypto.AsymmetricKeyBits\"@\n\025Create"
    "KeyPairResponse\022\022\n\npublic_key\030\002 \001(\t\022\023\n\013p"
    "rivate_key\030\003 \001(\t\"f\n\027PublicKeyEncryptRequ"
    "est\022$\n\004type\030\001 \001(\0162\026.crypto.AsymmetricTyp"
    "e\022\022\n\npublic_key\030\002 \001(\t\022\021\n\tplaintext\030\003 \001(\t"
    "\"*\n\030PublicKeyEncryptResponse\022\016\n\006cipher\030\002"
    " \001(\t\"e\n\030PrivateKeyDecryptRequest\022$\n\004type"
    "\030\001 \001(\0162\026.crypto.AsymmetricType\022\023\n\013privat"
    "e_key\030\002 \001(\t\022\016\n\006cipher\030\003 \001(\t\".\n\031PrivateKe"
    "yDecryptResponse\022\021\n\tplaintext\030\002 \001(\t*c\n\020S"
    "ymmetricKeyBits\022\033\n\027SymmetricKeyBitsUnkno"
    "wn\020\000\022\030\n\023SymmetricKey128Bits\020\200\001\022\030\n\023Symmet"
    "ricKey256Bits\020\200\002*=\n\016AsymmetricType\022\031\n\025As"
    "ymmetricTypeUnknown\020\000\022\007\n\003SM2\020\001\022\007\n\003RSA\020\002*"
    "[\n\021AsymmetricKeyBits\022\022\n\016KeyBitsUnknown\020\000"
    "\022\017\n\nKEY192BITS\020\300\001\022\017\n\nKEY256BITS\020\200\002\022\020\n\013KE"
    "Y1024BITS\020\200\0102\377\001\n\020SymmetricService\022I\n\014Cre"
    "ateCbcKey\022\033.crypto.CreateCbcKeyRequest\032\034"
    ".crypto.CreateCbcKeyResponse\022O\n\016CbcEncry"
    "ptFile\022\035.crypto.CbcEncryptFileRequest\032\036."
    "crypto.CbcEncryptFileResponse\022O\n\016CbcDecr"
    "yptFile\022\035.crypto.CbcDecryptFileRequest\032\036"
    ".crypto.CbcDecryptFileResponse2\222\002\n\021Asymm"
    "etricService\022L\n\rCreateKeyPair\022\034.crypto.C"
    "reateKeyPairRequest\032\035.crypto.CreateKeyPa"
    "irResponse\022U\n\020PublicKeyEncrypt\022\037.crypto."
    "PublicKeyEncryptRequest\032 .crypto.PublicK"
    "eyEncryptResponse\022X\n\021PrivateKeyDecrypt\022 "
    ".crypto.PrivateKeyDecryptRequest\032!.crypt"
    "o.PrivateKeyDecryptResponseb\006proto3", 1595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "crypto_server.proto", &protobuf_RegisterTypes);
  CreateCbcKeyRequest::default_instance_ = new CreateCbcKeyRequest();
  CreateCbcKeyResponse::default_instance_ = new CreateCbcKeyResponse();
  CbcEncryptFileRequest::default_instance_ = new CbcEncryptFileRequest();
  CbcEncryptFileResponse::default_instance_ = new CbcEncryptFileResponse();
  CbcDecryptFileRequest::default_instance_ = new CbcDecryptFileRequest();
  CbcDecryptFileResponse::default_instance_ = new CbcDecryptFileResponse();
  CreateKeyPairRequest::default_instance_ = new CreateKeyPairRequest();
  CreateKeyPairResponse::default_instance_ = new CreateKeyPairResponse();
  PublicKeyEncryptRequest::default_instance_ = new PublicKeyEncryptRequest();
  PublicKeyEncryptResponse::default_instance_ = new PublicKeyEncryptResponse();
  PrivateKeyDecryptRequest::default_instance_ = new PrivateKeyDecryptRequest();
  PrivateKeyDecryptResponse::default_instance_ = new PrivateKeyDecryptResponse();
  CreateCbcKeyRequest::default_instance_->InitAsDefaultInstance();
  CreateCbcKeyResponse::default_instance_->InitAsDefaultInstance();
  CbcEncryptFileRequest::default_instance_->InitAsDefaultInstance();
  CbcEncryptFileResponse::default_instance_->InitAsDefaultInstance();
  CbcDecryptFileRequest::default_instance_->InitAsDefaultInstance();
  CbcDecryptFileResponse::default_instance_->InitAsDefaultInstance();
  CreateKeyPairRequest::default_instance_->InitAsDefaultInstance();
  CreateKeyPairResponse::default_instance_->InitAsDefaultInstance();
  PublicKeyEncryptRequest::default_instance_->InitAsDefaultInstance();
  PublicKeyEncryptResponse::default_instance_->InitAsDefaultInstance();
  PrivateKeyDecryptRequest::default_instance_->InitAsDefaultInstance();
  PrivateKeyDecryptResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_crypto_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_crypto_5fserver_2eproto {
  StaticDescriptorInitializer_crypto_5fserver_2eproto() {
    protobuf_AddDesc_crypto_5fserver_2eproto();
  }
} static_descriptor_initializer_crypto_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* SymmetricKeyBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymmetricKeyBits_descriptor_;
}
bool SymmetricKeyBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsymmetricType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsymmetricType_descriptor_;
}
bool AsymmetricType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsymmetricKeyBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsymmetricKeyBits_descriptor_;
}
bool AsymmetricKeyBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 192:
    case 256:
    case 1024:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCbcKeyRequest::kKeyBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCbcKeyRequest::CreateCbcKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CreateCbcKeyRequest)
}

void CreateCbcKeyRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateCbcKeyRequest::CreateCbcKeyRequest(const CreateCbcKeyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CreateCbcKeyRequest)
}

void CreateCbcKeyRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_bits_ = 0;
}

CreateCbcKeyRequest::~CreateCbcKeyRequest() {
  // @@protoc_insertion_point(destructor:crypto.CreateCbcKeyRequest)
  SharedDtor();
}

void CreateCbcKeyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateCbcKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCbcKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCbcKeyRequest_descriptor_;
}

const CreateCbcKeyRequest& CreateCbcKeyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CreateCbcKeyRequest* CreateCbcKeyRequest::default_instance_ = NULL;

CreateCbcKeyRequest* CreateCbcKeyRequest::New(::google::protobuf::Arena* arena) const {
  CreateCbcKeyRequest* n = new CreateCbcKeyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateCbcKeyRequest::Clear() {
  key_bits_ = 0;
}

bool CreateCbcKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CreateCbcKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crypto.SymmetricKeyBits key_bits = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_bits(static_cast< ::crypto::SymmetricKeyBits >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CreateCbcKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CreateCbcKeyRequest)
  return false;
#undef DO_
}

void CreateCbcKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CreateCbcKeyRequest)
  // optional .crypto.SymmetricKeyBits key_bits = 1;
  if (this->key_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.CreateCbcKeyRequest)
}

::google::protobuf::uint8* CreateCbcKeyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CreateCbcKeyRequest)
  // optional .crypto.SymmetricKeyBits key_bits = 1;
  if (this->key_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.CreateCbcKeyRequest)
  return target;
}

int CreateCbcKeyRequest::ByteSize() const {
  int total_size = 0;

  // optional .crypto.SymmetricKeyBits key_bits = 1;
  if (this->key_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCbcKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateCbcKeyRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateCbcKeyRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCbcKeyRequest::MergeFrom(const CreateCbcKeyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key_bits() != 0) {
    set_key_bits(from.key_bits());
  }
}

void CreateCbcKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCbcKeyRequest::CopyFrom(const CreateCbcKeyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCbcKeyRequest::IsInitialized() const {

  return true;
}

void CreateCbcKeyRequest::Swap(CreateCbcKeyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCbcKeyRequest::InternalSwap(CreateCbcKeyRequest* other) {
  std::swap(key_bits_, other->key_bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateCbcKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCbcKeyRequest_descriptor_;
  metadata.reflection = CreateCbcKeyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateCbcKeyRequest

// optional .crypto.SymmetricKeyBits key_bits = 1;
void CreateCbcKeyRequest::clear_key_bits() {
  key_bits_ = 0;
}
 ::crypto::SymmetricKeyBits CreateCbcKeyRequest::key_bits() const {
  // @@protoc_insertion_point(field_get:crypto.CreateCbcKeyRequest.key_bits)
  return static_cast< ::crypto::SymmetricKeyBits >(key_bits_);
}
 void CreateCbcKeyRequest::set_key_bits(::crypto::SymmetricKeyBits value) {
  
  key_bits_ = value;
  // @@protoc_insertion_point(field_set:crypto.CreateCbcKeyRequest.key_bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCbcKeyResponse::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCbcKeyResponse::CreateCbcKeyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CreateCbcKeyResponse)
}

void CreateCbcKeyResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateCbcKeyResponse::CreateCbcKeyResponse(const CreateCbcKeyResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CreateCbcKeyResponse)
}

void CreateCbcKeyResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateCbcKeyResponse::~CreateCbcKeyResponse() {
  // @@protoc_insertion_point(destructor:crypto.CreateCbcKeyResponse)
  SharedDtor();
}

void CreateCbcKeyResponse::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateCbcKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCbcKeyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCbcKeyResponse_descriptor_;
}

const CreateCbcKeyResponse& CreateCbcKeyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CreateCbcKeyResponse* CreateCbcKeyResponse::default_instance_ = NULL;

CreateCbcKeyResponse* CreateCbcKeyResponse::New(::google::protobuf::Arena* arena) const {
  CreateCbcKeyResponse* n = new CreateCbcKeyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateCbcKeyResponse::Clear() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateCbcKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CreateCbcKeyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CreateCbcKeyResponse.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CreateCbcKeyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CreateCbcKeyResponse)
  return false;
#undef DO_
}

void CreateCbcKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CreateCbcKeyResponse)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CreateCbcKeyResponse.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.CreateCbcKeyResponse)
}

::google::protobuf::uint8* CreateCbcKeyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CreateCbcKeyResponse)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CreateCbcKeyResponse.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.CreateCbcKeyResponse)
  return target;
}

int CreateCbcKeyResponse::ByteSize() const {
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCbcKeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateCbcKeyResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateCbcKeyResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCbcKeyResponse::MergeFrom(const CreateCbcKeyResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void CreateCbcKeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCbcKeyResponse::CopyFrom(const CreateCbcKeyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCbcKeyResponse::IsInitialized() const {

  return true;
}

void CreateCbcKeyResponse::Swap(CreateCbcKeyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCbcKeyResponse::InternalSwap(CreateCbcKeyResponse* other) {
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateCbcKeyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCbcKeyResponse_descriptor_;
  metadata.reflection = CreateCbcKeyResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateCbcKeyResponse

// optional string key = 1;
void CreateCbcKeyResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateCbcKeyResponse::key() const {
  // @@protoc_insertion_point(field_get:crypto.CreateCbcKeyResponse.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateCbcKeyResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CreateCbcKeyResponse.key)
}
 void CreateCbcKeyResponse::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CreateCbcKeyResponse.key)
}
 void CreateCbcKeyResponse::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CreateCbcKeyResponse.key)
}
 ::std::string* CreateCbcKeyResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CreateCbcKeyResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateCbcKeyResponse::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateCbcKeyResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:crypto.CreateCbcKeyResponse.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CbcEncryptFileRequest::kKeyFieldNumber;
const int CbcEncryptFileRequest::kIvFieldNumber;
const int CbcEncryptFileRequest::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CbcEncryptFileRequest::CbcEncryptFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CbcEncryptFileRequest)
}

void CbcEncryptFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CbcEncryptFileRequest::CbcEncryptFileRequest(const CbcEncryptFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CbcEncryptFileRequest)
}

void CbcEncryptFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CbcEncryptFileRequest::~CbcEncryptFileRequest() {
  // @@protoc_insertion_point(destructor:crypto.CbcEncryptFileRequest)
  SharedDtor();
}

void CbcEncryptFileRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CbcEncryptFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CbcEncryptFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CbcEncryptFileRequest_descriptor_;
}

const CbcEncryptFileRequest& CbcEncryptFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CbcEncryptFileRequest* CbcEncryptFileRequest::default_instance_ = NULL;

CbcEncryptFileRequest* CbcEncryptFileRequest::New(::google::protobuf::Arena* arena) const {
  CbcEncryptFileRequest* n = new CbcEncryptFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CbcEncryptFileRequest::Clear() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CbcEncryptFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CbcEncryptFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CbcEncryptFileRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_iv;
        break;
      }

      // optional string iv = 2;
      case 2: {
        if (tag == 18) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iv()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iv().data(), this->iv().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CbcEncryptFileRequest.iv"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_path;
        break;
      }

      // optional string file_path = 3;
      case 3: {
        if (tag == 26) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CbcEncryptFileRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CbcEncryptFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CbcEncryptFileRequest)
  return false;
#undef DO_
}

void CbcEncryptFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CbcEncryptFileRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcEncryptFileRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iv().data(), this->iv().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcEncryptFileRequest.iv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iv(), output);
  }

  // optional string file_path = 3;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcEncryptFileRequest.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.CbcEncryptFileRequest)
}

::google::protobuf::uint8* CbcEncryptFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CbcEncryptFileRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcEncryptFileRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iv().data(), this->iv().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcEncryptFileRequest.iv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iv(), target);
  }

  // optional string file_path = 3;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcEncryptFileRequest.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.CbcEncryptFileRequest)
  return target;
}

int CbcEncryptFileRequest::ByteSize() const {
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string iv = 2;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iv());
  }

  // optional string file_path = 3;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CbcEncryptFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CbcEncryptFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CbcEncryptFileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CbcEncryptFileRequest::MergeFrom(const CbcEncryptFileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void CbcEncryptFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CbcEncryptFileRequest::CopyFrom(const CbcEncryptFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbcEncryptFileRequest::IsInitialized() const {

  return true;
}

void CbcEncryptFileRequest::Swap(CbcEncryptFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CbcEncryptFileRequest::InternalSwap(CbcEncryptFileRequest* other) {
  key_.Swap(&other->key_);
  iv_.Swap(&other->iv_);
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CbcEncryptFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CbcEncryptFileRequest_descriptor_;
  metadata.reflection = CbcEncryptFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CbcEncryptFileRequest

// optional string key = 1;
void CbcEncryptFileRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CbcEncryptFileRequest::key() const {
  // @@protoc_insertion_point(field_get:crypto.CbcEncryptFileRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcEncryptFileRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CbcEncryptFileRequest.key)
}
 void CbcEncryptFileRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CbcEncryptFileRequest.key)
}
 void CbcEncryptFileRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CbcEncryptFileRequest.key)
}
 ::std::string* CbcEncryptFileRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CbcEncryptFileRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CbcEncryptFileRequest::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcEncryptFileRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:crypto.CbcEncryptFileRequest.key)
}

// optional string iv = 2;
void CbcEncryptFileRequest::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CbcEncryptFileRequest::iv() const {
  // @@protoc_insertion_point(field_get:crypto.CbcEncryptFileRequest.iv)
  return iv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcEncryptFileRequest::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CbcEncryptFileRequest.iv)
}
 void CbcEncryptFileRequest::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CbcEncryptFileRequest.iv)
}
 void CbcEncryptFileRequest::set_iv(const char* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CbcEncryptFileRequest.iv)
}
 ::std::string* CbcEncryptFileRequest::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CbcEncryptFileRequest.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CbcEncryptFileRequest::release_iv() {
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcEncryptFileRequest::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:crypto.CbcEncryptFileRequest.iv)
}

// optional string file_path = 3;
void CbcEncryptFileRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CbcEncryptFileRequest::file_path() const {
  // @@protoc_insertion_point(field_get:crypto.CbcEncryptFileRequest.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcEncryptFileRequest::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CbcEncryptFileRequest.file_path)
}
 void CbcEncryptFileRequest::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CbcEncryptFileRequest.file_path)
}
 void CbcEncryptFileRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CbcEncryptFileRequest.file_path)
}
 ::std::string* CbcEncryptFileRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CbcEncryptFileRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CbcEncryptFileRequest::release_file_path() {
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcEncryptFileRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:crypto.CbcEncryptFileRequest.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CbcEncryptFileResponse::CbcEncryptFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CbcEncryptFileResponse)
}

void CbcEncryptFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CbcEncryptFileResponse::CbcEncryptFileResponse(const CbcEncryptFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CbcEncryptFileResponse)
}

void CbcEncryptFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CbcEncryptFileResponse::~CbcEncryptFileResponse() {
  // @@protoc_insertion_point(destructor:crypto.CbcEncryptFileResponse)
  SharedDtor();
}

void CbcEncryptFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CbcEncryptFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CbcEncryptFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CbcEncryptFileResponse_descriptor_;
}

const CbcEncryptFileResponse& CbcEncryptFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CbcEncryptFileResponse* CbcEncryptFileResponse::default_instance_ = NULL;

CbcEncryptFileResponse* CbcEncryptFileResponse::New(::google::protobuf::Arena* arena) const {
  CbcEncryptFileResponse* n = new CbcEncryptFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CbcEncryptFileResponse::Clear() {
}

bool CbcEncryptFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CbcEncryptFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CbcEncryptFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CbcEncryptFileResponse)
  return false;
#undef DO_
}

void CbcEncryptFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CbcEncryptFileResponse)
  // @@protoc_insertion_point(serialize_end:crypto.CbcEncryptFileResponse)
}

::google::protobuf::uint8* CbcEncryptFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CbcEncryptFileResponse)
  // @@protoc_insertion_point(serialize_to_array_end:crypto.CbcEncryptFileResponse)
  return target;
}

int CbcEncryptFileResponse::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CbcEncryptFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CbcEncryptFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CbcEncryptFileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CbcEncryptFileResponse::MergeFrom(const CbcEncryptFileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void CbcEncryptFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CbcEncryptFileResponse::CopyFrom(const CbcEncryptFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbcEncryptFileResponse::IsInitialized() const {

  return true;
}

void CbcEncryptFileResponse::Swap(CbcEncryptFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CbcEncryptFileResponse::InternalSwap(CbcEncryptFileResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CbcEncryptFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CbcEncryptFileResponse_descriptor_;
  metadata.reflection = CbcEncryptFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CbcEncryptFileResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CbcDecryptFileRequest::kKeyFieldNumber;
const int CbcDecryptFileRequest::kIvFieldNumber;
const int CbcDecryptFileRequest::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CbcDecryptFileRequest::CbcDecryptFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CbcDecryptFileRequest)
}

void CbcDecryptFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CbcDecryptFileRequest::CbcDecryptFileRequest(const CbcDecryptFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CbcDecryptFileRequest)
}

void CbcDecryptFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CbcDecryptFileRequest::~CbcDecryptFileRequest() {
  // @@protoc_insertion_point(destructor:crypto.CbcDecryptFileRequest)
  SharedDtor();
}

void CbcDecryptFileRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CbcDecryptFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CbcDecryptFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CbcDecryptFileRequest_descriptor_;
}

const CbcDecryptFileRequest& CbcDecryptFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CbcDecryptFileRequest* CbcDecryptFileRequest::default_instance_ = NULL;

CbcDecryptFileRequest* CbcDecryptFileRequest::New(::google::protobuf::Arena* arena) const {
  CbcDecryptFileRequest* n = new CbcDecryptFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CbcDecryptFileRequest::Clear() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CbcDecryptFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CbcDecryptFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CbcDecryptFileRequest.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_iv;
        break;
      }

      // optional string iv = 2;
      case 2: {
        if (tag == 18) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iv()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iv().data(), this->iv().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CbcDecryptFileRequest.iv"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_path;
        break;
      }

      // optional string file_path = 3;
      case 3: {
        if (tag == 26) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CbcDecryptFileRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CbcDecryptFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CbcDecryptFileRequest)
  return false;
#undef DO_
}

void CbcDecryptFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CbcDecryptFileRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcDecryptFileRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iv().data(), this->iv().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcDecryptFileRequest.iv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iv(), output);
  }

  // optional string file_path = 3;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcDecryptFileRequest.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.CbcDecryptFileRequest)
}

::google::protobuf::uint8* CbcDecryptFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CbcDecryptFileRequest)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcDecryptFileRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iv().data(), this->iv().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcDecryptFileRequest.iv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iv(), target);
  }

  // optional string file_path = 3;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CbcDecryptFileRequest.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.CbcDecryptFileRequest)
  return target;
}

int CbcDecryptFileRequest::ByteSize() const {
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string iv = 2;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iv());
  }

  // optional string file_path = 3;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CbcDecryptFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CbcDecryptFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CbcDecryptFileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CbcDecryptFileRequest::MergeFrom(const CbcDecryptFileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void CbcDecryptFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CbcDecryptFileRequest::CopyFrom(const CbcDecryptFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbcDecryptFileRequest::IsInitialized() const {

  return true;
}

void CbcDecryptFileRequest::Swap(CbcDecryptFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CbcDecryptFileRequest::InternalSwap(CbcDecryptFileRequest* other) {
  key_.Swap(&other->key_);
  iv_.Swap(&other->iv_);
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CbcDecryptFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CbcDecryptFileRequest_descriptor_;
  metadata.reflection = CbcDecryptFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CbcDecryptFileRequest

// optional string key = 1;
void CbcDecryptFileRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CbcDecryptFileRequest::key() const {
  // @@protoc_insertion_point(field_get:crypto.CbcDecryptFileRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcDecryptFileRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CbcDecryptFileRequest.key)
}
 void CbcDecryptFileRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CbcDecryptFileRequest.key)
}
 void CbcDecryptFileRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CbcDecryptFileRequest.key)
}
 ::std::string* CbcDecryptFileRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CbcDecryptFileRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CbcDecryptFileRequest::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcDecryptFileRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:crypto.CbcDecryptFileRequest.key)
}

// optional string iv = 2;
void CbcDecryptFileRequest::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CbcDecryptFileRequest::iv() const {
  // @@protoc_insertion_point(field_get:crypto.CbcDecryptFileRequest.iv)
  return iv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcDecryptFileRequest::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CbcDecryptFileRequest.iv)
}
 void CbcDecryptFileRequest::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CbcDecryptFileRequest.iv)
}
 void CbcDecryptFileRequest::set_iv(const char* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CbcDecryptFileRequest.iv)
}
 ::std::string* CbcDecryptFileRequest::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CbcDecryptFileRequest.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CbcDecryptFileRequest::release_iv() {
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcDecryptFileRequest::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:crypto.CbcDecryptFileRequest.iv)
}

// optional string file_path = 3;
void CbcDecryptFileRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CbcDecryptFileRequest::file_path() const {
  // @@protoc_insertion_point(field_get:crypto.CbcDecryptFileRequest.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcDecryptFileRequest::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CbcDecryptFileRequest.file_path)
}
 void CbcDecryptFileRequest::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CbcDecryptFileRequest.file_path)
}
 void CbcDecryptFileRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CbcDecryptFileRequest.file_path)
}
 ::std::string* CbcDecryptFileRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CbcDecryptFileRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CbcDecryptFileRequest::release_file_path() {
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CbcDecryptFileRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:crypto.CbcDecryptFileRequest.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CbcDecryptFileResponse::CbcDecryptFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CbcDecryptFileResponse)
}

void CbcDecryptFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CbcDecryptFileResponse::CbcDecryptFileResponse(const CbcDecryptFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CbcDecryptFileResponse)
}

void CbcDecryptFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CbcDecryptFileResponse::~CbcDecryptFileResponse() {
  // @@protoc_insertion_point(destructor:crypto.CbcDecryptFileResponse)
  SharedDtor();
}

void CbcDecryptFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CbcDecryptFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CbcDecryptFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CbcDecryptFileResponse_descriptor_;
}

const CbcDecryptFileResponse& CbcDecryptFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CbcDecryptFileResponse* CbcDecryptFileResponse::default_instance_ = NULL;

CbcDecryptFileResponse* CbcDecryptFileResponse::New(::google::protobuf::Arena* arena) const {
  CbcDecryptFileResponse* n = new CbcDecryptFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CbcDecryptFileResponse::Clear() {
}

bool CbcDecryptFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CbcDecryptFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CbcDecryptFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CbcDecryptFileResponse)
  return false;
#undef DO_
}

void CbcDecryptFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CbcDecryptFileResponse)
  // @@protoc_insertion_point(serialize_end:crypto.CbcDecryptFileResponse)
}

::google::protobuf::uint8* CbcDecryptFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CbcDecryptFileResponse)
  // @@protoc_insertion_point(serialize_to_array_end:crypto.CbcDecryptFileResponse)
  return target;
}

int CbcDecryptFileResponse::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CbcDecryptFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CbcDecryptFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CbcDecryptFileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CbcDecryptFileResponse::MergeFrom(const CbcDecryptFileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void CbcDecryptFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CbcDecryptFileResponse::CopyFrom(const CbcDecryptFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CbcDecryptFileResponse::IsInitialized() const {

  return true;
}

void CbcDecryptFileResponse::Swap(CbcDecryptFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CbcDecryptFileResponse::InternalSwap(CbcDecryptFileResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CbcDecryptFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CbcDecryptFileResponse_descriptor_;
  metadata.reflection = CbcDecryptFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CbcDecryptFileResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateKeyPairRequest::kTypeFieldNumber;
const int CreateKeyPairRequest::kKeyBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateKeyPairRequest::CreateKeyPairRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CreateKeyPairRequest)
}

void CreateKeyPairRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateKeyPairRequest::CreateKeyPairRequest(const CreateKeyPairRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CreateKeyPairRequest)
}

void CreateKeyPairRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  key_bits_ = 0;
}

CreateKeyPairRequest::~CreateKeyPairRequest() {
  // @@protoc_insertion_point(destructor:crypto.CreateKeyPairRequest)
  SharedDtor();
}

void CreateKeyPairRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateKeyPairRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateKeyPairRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateKeyPairRequest_descriptor_;
}

const CreateKeyPairRequest& CreateKeyPairRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CreateKeyPairRequest* CreateKeyPairRequest::default_instance_ = NULL;

CreateKeyPairRequest* CreateKeyPairRequest::New(::google::protobuf::Arena* arena) const {
  CreateKeyPairRequest* n = new CreateKeyPairRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateKeyPairRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateKeyPairRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, key_bits_);

#undef ZR_HELPER_
#undef ZR_

}

bool CreateKeyPairRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CreateKeyPairRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crypto.AsymmetricType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::crypto::AsymmetricType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_bits;
        break;
      }

      // optional .crypto.AsymmetricKeyBits key_bits = 2;
      case 2: {
        if (tag == 16) {
         parse_key_bits:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_bits(static_cast< ::crypto::AsymmetricKeyBits >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CreateKeyPairRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CreateKeyPairRequest)
  return false;
#undef DO_
}

void CreateKeyPairRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CreateKeyPairRequest)
  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .crypto.AsymmetricKeyBits key_bits = 2;
  if (this->key_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->key_bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.CreateKeyPairRequest)
}

::google::protobuf::uint8* CreateKeyPairRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CreateKeyPairRequest)
  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .crypto.AsymmetricKeyBits key_bits = 2;
  if (this->key_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->key_bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.CreateKeyPairRequest)
  return target;
}

int CreateKeyPairRequest::ByteSize() const {
  int total_size = 0;

  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .crypto.AsymmetricKeyBits key_bits = 2;
  if (this->key_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateKeyPairRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateKeyPairRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateKeyPairRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateKeyPairRequest::MergeFrom(const CreateKeyPairRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.key_bits() != 0) {
    set_key_bits(from.key_bits());
  }
}

void CreateKeyPairRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateKeyPairRequest::CopyFrom(const CreateKeyPairRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateKeyPairRequest::IsInitialized() const {

  return true;
}

void CreateKeyPairRequest::Swap(CreateKeyPairRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateKeyPairRequest::InternalSwap(CreateKeyPairRequest* other) {
  std::swap(type_, other->type_);
  std::swap(key_bits_, other->key_bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateKeyPairRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateKeyPairRequest_descriptor_;
  metadata.reflection = CreateKeyPairRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateKeyPairRequest

// optional .crypto.AsymmetricType type = 1;
void CreateKeyPairRequest::clear_type() {
  type_ = 0;
}
 ::crypto::AsymmetricType CreateKeyPairRequest::type() const {
  // @@protoc_insertion_point(field_get:crypto.CreateKeyPairRequest.type)
  return static_cast< ::crypto::AsymmetricType >(type_);
}
 void CreateKeyPairRequest::set_type(::crypto::AsymmetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:crypto.CreateKeyPairRequest.type)
}

// optional .crypto.AsymmetricKeyBits key_bits = 2;
void CreateKeyPairRequest::clear_key_bits() {
  key_bits_ = 0;
}
 ::crypto::AsymmetricKeyBits CreateKeyPairRequest::key_bits() const {
  // @@protoc_insertion_point(field_get:crypto.CreateKeyPairRequest.key_bits)
  return static_cast< ::crypto::AsymmetricKeyBits >(key_bits_);
}
 void CreateKeyPairRequest::set_key_bits(::crypto::AsymmetricKeyBits value) {
  
  key_bits_ = value;
  // @@protoc_insertion_point(field_set:crypto.CreateKeyPairRequest.key_bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateKeyPairResponse::kPublicKeyFieldNumber;
const int CreateKeyPairResponse::kPrivateKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateKeyPairResponse::CreateKeyPairResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.CreateKeyPairResponse)
}

void CreateKeyPairResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateKeyPairResponse::CreateKeyPairResponse(const CreateKeyPairResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.CreateKeyPairResponse)
}

void CreateKeyPairResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateKeyPairResponse::~CreateKeyPairResponse() {
  // @@protoc_insertion_point(destructor:crypto.CreateKeyPairResponse)
  SharedDtor();
}

void CreateKeyPairResponse::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateKeyPairResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateKeyPairResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateKeyPairResponse_descriptor_;
}

const CreateKeyPairResponse& CreateKeyPairResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

CreateKeyPairResponse* CreateKeyPairResponse::default_instance_ = NULL;

CreateKeyPairResponse* CreateKeyPairResponse::New(::google::protobuf::Arena* arena) const {
  CreateKeyPairResponse* n = new CreateKeyPairResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateKeyPairResponse::Clear() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateKeyPairResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.CreateKeyPairResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CreateKeyPairResponse.public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_private_key;
        break;
      }

      // optional string private_key = 3;
      case 3: {
        if (tag == 26) {
         parse_private_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.CreateKeyPairResponse.private_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.CreateKeyPairResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.CreateKeyPairResponse)
  return false;
#undef DO_
}

void CreateKeyPairResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.CreateKeyPairResponse)
  // optional string public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CreateKeyPairResponse.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->public_key(), output);
  }

  // optional string private_key = 3;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CreateKeyPairResponse.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->private_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.CreateKeyPairResponse)
}

::google::protobuf::uint8* CreateKeyPairResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.CreateKeyPairResponse)
  // optional string public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CreateKeyPairResponse.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_key(), target);
  }

  // optional string private_key = 3;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.CreateKeyPairResponse.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->private_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.CreateKeyPairResponse)
  return target;
}

int CreateKeyPairResponse::ByteSize() const {
  int total_size = 0;

  // optional string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  // optional string private_key = 3;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateKeyPairResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateKeyPairResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateKeyPairResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateKeyPairResponse::MergeFrom(const CreateKeyPairResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.private_key().size() > 0) {

    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
}

void CreateKeyPairResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateKeyPairResponse::CopyFrom(const CreateKeyPairResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateKeyPairResponse::IsInitialized() const {

  return true;
}

void CreateKeyPairResponse::Swap(CreateKeyPairResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateKeyPairResponse::InternalSwap(CreateKeyPairResponse* other) {
  public_key_.Swap(&other->public_key_);
  private_key_.Swap(&other->private_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateKeyPairResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateKeyPairResponse_descriptor_;
  metadata.reflection = CreateKeyPairResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateKeyPairResponse

// optional string public_key = 2;
void CreateKeyPairResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateKeyPairResponse::public_key() const {
  // @@protoc_insertion_point(field_get:crypto.CreateKeyPairResponse.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateKeyPairResponse::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CreateKeyPairResponse.public_key)
}
 void CreateKeyPairResponse::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CreateKeyPairResponse.public_key)
}
 void CreateKeyPairResponse::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CreateKeyPairResponse.public_key)
}
 ::std::string* CreateKeyPairResponse::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CreateKeyPairResponse.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateKeyPairResponse::release_public_key() {
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateKeyPairResponse::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:crypto.CreateKeyPairResponse.public_key)
}

// optional string private_key = 3;
void CreateKeyPairResponse::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateKeyPairResponse::private_key() const {
  // @@protoc_insertion_point(field_get:crypto.CreateKeyPairResponse.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateKeyPairResponse::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.CreateKeyPairResponse.private_key)
}
 void CreateKeyPairResponse::set_private_key(const char* value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.CreateKeyPairResponse.private_key)
}
 void CreateKeyPairResponse::set_private_key(const char* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.CreateKeyPairResponse.private_key)
}
 ::std::string* CreateKeyPairResponse::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.CreateKeyPairResponse.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateKeyPairResponse::release_private_key() {
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateKeyPairResponse::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:crypto.CreateKeyPairResponse.private_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicKeyEncryptRequest::kTypeFieldNumber;
const int PublicKeyEncryptRequest::kPublicKeyFieldNumber;
const int PublicKeyEncryptRequest::kPlaintextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicKeyEncryptRequest::PublicKeyEncryptRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.PublicKeyEncryptRequest)
}

void PublicKeyEncryptRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PublicKeyEncryptRequest::PublicKeyEncryptRequest(const PublicKeyEncryptRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.PublicKeyEncryptRequest)
}

void PublicKeyEncryptRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PublicKeyEncryptRequest::~PublicKeyEncryptRequest() {
  // @@protoc_insertion_point(destructor:crypto.PublicKeyEncryptRequest)
  SharedDtor();
}

void PublicKeyEncryptRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PublicKeyEncryptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicKeyEncryptRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicKeyEncryptRequest_descriptor_;
}

const PublicKeyEncryptRequest& PublicKeyEncryptRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

PublicKeyEncryptRequest* PublicKeyEncryptRequest::default_instance_ = NULL;

PublicKeyEncryptRequest* PublicKeyEncryptRequest::New(::google::protobuf::Arena* arena) const {
  PublicKeyEncryptRequest* n = new PublicKeyEncryptRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicKeyEncryptRequest::Clear() {
  type_ = 0;
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PublicKeyEncryptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.PublicKeyEncryptRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crypto.AsymmetricType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::crypto::AsymmetricType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }

      // optional string public_key = 2;
      case 2: {
        if (tag == 18) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.PublicKeyEncryptRequest.public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plaintext;
        break;
      }

      // optional string plaintext = 3;
      case 3: {
        if (tag == 26) {
         parse_plaintext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plaintext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plaintext().data(), this->plaintext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.PublicKeyEncryptRequest.plaintext"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.PublicKeyEncryptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.PublicKeyEncryptRequest)
  return false;
#undef DO_
}

void PublicKeyEncryptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.PublicKeyEncryptRequest)
  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PublicKeyEncryptRequest.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->public_key(), output);
  }

  // optional string plaintext = 3;
  if (this->plaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PublicKeyEncryptRequest.plaintext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->plaintext(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.PublicKeyEncryptRequest)
}

::google::protobuf::uint8* PublicKeyEncryptRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.PublicKeyEncryptRequest)
  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PublicKeyEncryptRequest.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_key(), target);
  }

  // optional string plaintext = 3;
  if (this->plaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PublicKeyEncryptRequest.plaintext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->plaintext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.PublicKeyEncryptRequest)
  return target;
}

int PublicKeyEncryptRequest::ByteSize() const {
  int total_size = 0;

  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  // optional string plaintext = 3;
  if (this->plaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plaintext());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicKeyEncryptRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PublicKeyEncryptRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicKeyEncryptRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicKeyEncryptRequest::MergeFrom(const PublicKeyEncryptRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.plaintext().size() > 0) {

    plaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plaintext_);
  }
}

void PublicKeyEncryptRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKeyEncryptRequest::CopyFrom(const PublicKeyEncryptRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyEncryptRequest::IsInitialized() const {

  return true;
}

void PublicKeyEncryptRequest::Swap(PublicKeyEncryptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicKeyEncryptRequest::InternalSwap(PublicKeyEncryptRequest* other) {
  std::swap(type_, other->type_);
  public_key_.Swap(&other->public_key_);
  plaintext_.Swap(&other->plaintext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicKeyEncryptRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicKeyEncryptRequest_descriptor_;
  metadata.reflection = PublicKeyEncryptRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicKeyEncryptRequest

// optional .crypto.AsymmetricType type = 1;
void PublicKeyEncryptRequest::clear_type() {
  type_ = 0;
}
 ::crypto::AsymmetricType PublicKeyEncryptRequest::type() const {
  // @@protoc_insertion_point(field_get:crypto.PublicKeyEncryptRequest.type)
  return static_cast< ::crypto::AsymmetricType >(type_);
}
 void PublicKeyEncryptRequest::set_type(::crypto::AsymmetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:crypto.PublicKeyEncryptRequest.type)
}

// optional string public_key = 2;
void PublicKeyEncryptRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PublicKeyEncryptRequest::public_key() const {
  // @@protoc_insertion_point(field_get:crypto.PublicKeyEncryptRequest.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PublicKeyEncryptRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.PublicKeyEncryptRequest.public_key)
}
 void PublicKeyEncryptRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.PublicKeyEncryptRequest.public_key)
}
 void PublicKeyEncryptRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.PublicKeyEncryptRequest.public_key)
}
 ::std::string* PublicKeyEncryptRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.PublicKeyEncryptRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PublicKeyEncryptRequest::release_public_key() {
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PublicKeyEncryptRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:crypto.PublicKeyEncryptRequest.public_key)
}

// optional string plaintext = 3;
void PublicKeyEncryptRequest::clear_plaintext() {
  plaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PublicKeyEncryptRequest::plaintext() const {
  // @@protoc_insertion_point(field_get:crypto.PublicKeyEncryptRequest.plaintext)
  return plaintext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PublicKeyEncryptRequest::set_plaintext(const ::std::string& value) {
  
  plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.PublicKeyEncryptRequest.plaintext)
}
 void PublicKeyEncryptRequest::set_plaintext(const char* value) {
  
  plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.PublicKeyEncryptRequest.plaintext)
}
 void PublicKeyEncryptRequest::set_plaintext(const char* value, size_t size) {
  
  plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.PublicKeyEncryptRequest.plaintext)
}
 ::std::string* PublicKeyEncryptRequest::mutable_plaintext() {
  
  // @@protoc_insertion_point(field_mutable:crypto.PublicKeyEncryptRequest.plaintext)
  return plaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PublicKeyEncryptRequest::release_plaintext() {
  
  return plaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PublicKeyEncryptRequest::set_allocated_plaintext(::std::string* plaintext) {
  if (plaintext != NULL) {
    
  } else {
    
  }
  plaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaintext);
  // @@protoc_insertion_point(field_set_allocated:crypto.PublicKeyEncryptRequest.plaintext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicKeyEncryptResponse::kCipherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicKeyEncryptResponse::PublicKeyEncryptResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.PublicKeyEncryptResponse)
}

void PublicKeyEncryptResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PublicKeyEncryptResponse::PublicKeyEncryptResponse(const PublicKeyEncryptResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.PublicKeyEncryptResponse)
}

void PublicKeyEncryptResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cipher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PublicKeyEncryptResponse::~PublicKeyEncryptResponse() {
  // @@protoc_insertion_point(destructor:crypto.PublicKeyEncryptResponse)
  SharedDtor();
}

void PublicKeyEncryptResponse::SharedDtor() {
  cipher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PublicKeyEncryptResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicKeyEncryptResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicKeyEncryptResponse_descriptor_;
}

const PublicKeyEncryptResponse& PublicKeyEncryptResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

PublicKeyEncryptResponse* PublicKeyEncryptResponse::default_instance_ = NULL;

PublicKeyEncryptResponse* PublicKeyEncryptResponse::New(::google::protobuf::Arena* arena) const {
  PublicKeyEncryptResponse* n = new PublicKeyEncryptResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicKeyEncryptResponse::Clear() {
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PublicKeyEncryptResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.PublicKeyEncryptResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cipher = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cipher()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cipher().data(), this->cipher().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.PublicKeyEncryptResponse.cipher"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.PublicKeyEncryptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.PublicKeyEncryptResponse)
  return false;
#undef DO_
}

void PublicKeyEncryptResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.PublicKeyEncryptResponse)
  // optional string cipher = 2;
  if (this->cipher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PublicKeyEncryptResponse.cipher");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cipher(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.PublicKeyEncryptResponse)
}

::google::protobuf::uint8* PublicKeyEncryptResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.PublicKeyEncryptResponse)
  // optional string cipher = 2;
  if (this->cipher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PublicKeyEncryptResponse.cipher");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cipher(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.PublicKeyEncryptResponse)
  return target;
}

int PublicKeyEncryptResponse::ByteSize() const {
  int total_size = 0;

  // optional string cipher = 2;
  if (this->cipher().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cipher());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicKeyEncryptResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PublicKeyEncryptResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicKeyEncryptResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicKeyEncryptResponse::MergeFrom(const PublicKeyEncryptResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cipher().size() > 0) {

    cipher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cipher_);
  }
}

void PublicKeyEncryptResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKeyEncryptResponse::CopyFrom(const PublicKeyEncryptResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyEncryptResponse::IsInitialized() const {

  return true;
}

void PublicKeyEncryptResponse::Swap(PublicKeyEncryptResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicKeyEncryptResponse::InternalSwap(PublicKeyEncryptResponse* other) {
  cipher_.Swap(&other->cipher_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicKeyEncryptResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicKeyEncryptResponse_descriptor_;
  metadata.reflection = PublicKeyEncryptResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicKeyEncryptResponse

// optional string cipher = 2;
void PublicKeyEncryptResponse::clear_cipher() {
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PublicKeyEncryptResponse::cipher() const {
  // @@protoc_insertion_point(field_get:crypto.PublicKeyEncryptResponse.cipher)
  return cipher_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PublicKeyEncryptResponse::set_cipher(const ::std::string& value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.PublicKeyEncryptResponse.cipher)
}
 void PublicKeyEncryptResponse::set_cipher(const char* value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.PublicKeyEncryptResponse.cipher)
}
 void PublicKeyEncryptResponse::set_cipher(const char* value, size_t size) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.PublicKeyEncryptResponse.cipher)
}
 ::std::string* PublicKeyEncryptResponse::mutable_cipher() {
  
  // @@protoc_insertion_point(field_mutable:crypto.PublicKeyEncryptResponse.cipher)
  return cipher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PublicKeyEncryptResponse::release_cipher() {
  
  return cipher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PublicKeyEncryptResponse::set_allocated_cipher(::std::string* cipher) {
  if (cipher != NULL) {
    
  } else {
    
  }
  cipher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cipher);
  // @@protoc_insertion_point(field_set_allocated:crypto.PublicKeyEncryptResponse.cipher)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateKeyDecryptRequest::kTypeFieldNumber;
const int PrivateKeyDecryptRequest::kPrivateKeyFieldNumber;
const int PrivateKeyDecryptRequest::kCipherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateKeyDecryptRequest::PrivateKeyDecryptRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.PrivateKeyDecryptRequest)
}

void PrivateKeyDecryptRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PrivateKeyDecryptRequest::PrivateKeyDecryptRequest(const PrivateKeyDecryptRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.PrivateKeyDecryptRequest)
}

void PrivateKeyDecryptRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrivateKeyDecryptRequest::~PrivateKeyDecryptRequest() {
  // @@protoc_insertion_point(destructor:crypto.PrivateKeyDecryptRequest)
  SharedDtor();
}

void PrivateKeyDecryptRequest::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PrivateKeyDecryptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateKeyDecryptRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateKeyDecryptRequest_descriptor_;
}

const PrivateKeyDecryptRequest& PrivateKeyDecryptRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

PrivateKeyDecryptRequest* PrivateKeyDecryptRequest::default_instance_ = NULL;

PrivateKeyDecryptRequest* PrivateKeyDecryptRequest::New(::google::protobuf::Arena* arena) const {
  PrivateKeyDecryptRequest* n = new PrivateKeyDecryptRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateKeyDecryptRequest::Clear() {
  type_ = 0;
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrivateKeyDecryptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.PrivateKeyDecryptRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crypto.AsymmetricType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::crypto::AsymmetricType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_private_key;
        break;
      }

      // optional string private_key = 2;
      case 2: {
        if (tag == 18) {
         parse_private_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.PrivateKeyDecryptRequest.private_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cipher;
        break;
      }

      // optional string cipher = 3;
      case 3: {
        if (tag == 26) {
         parse_cipher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cipher()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cipher().data(), this->cipher().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.PrivateKeyDecryptRequest.cipher"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.PrivateKeyDecryptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.PrivateKeyDecryptRequest)
  return false;
#undef DO_
}

void PrivateKeyDecryptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.PrivateKeyDecryptRequest)
  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string private_key = 2;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PrivateKeyDecryptRequest.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->private_key(), output);
  }

  // optional string cipher = 3;
  if (this->cipher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PrivateKeyDecryptRequest.cipher");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cipher(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.PrivateKeyDecryptRequest)
}

::google::protobuf::uint8* PrivateKeyDecryptRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.PrivateKeyDecryptRequest)
  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string private_key = 2;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PrivateKeyDecryptRequest.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->private_key(), target);
  }

  // optional string cipher = 3;
  if (this->cipher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher().data(), this->cipher().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PrivateKeyDecryptRequest.cipher");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cipher(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.PrivateKeyDecryptRequest)
  return target;
}

int PrivateKeyDecryptRequest::ByteSize() const {
  int total_size = 0;

  // optional .crypto.AsymmetricType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string private_key = 2;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }

  // optional string cipher = 3;
  if (this->cipher().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cipher());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateKeyDecryptRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrivateKeyDecryptRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateKeyDecryptRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateKeyDecryptRequest::MergeFrom(const PrivateKeyDecryptRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.private_key().size() > 0) {

    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  if (from.cipher().size() > 0) {

    cipher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cipher_);
  }
}

void PrivateKeyDecryptRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateKeyDecryptRequest::CopyFrom(const PrivateKeyDecryptRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateKeyDecryptRequest::IsInitialized() const {

  return true;
}

void PrivateKeyDecryptRequest::Swap(PrivateKeyDecryptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateKeyDecryptRequest::InternalSwap(PrivateKeyDecryptRequest* other) {
  std::swap(type_, other->type_);
  private_key_.Swap(&other->private_key_);
  cipher_.Swap(&other->cipher_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateKeyDecryptRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateKeyDecryptRequest_descriptor_;
  metadata.reflection = PrivateKeyDecryptRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrivateKeyDecryptRequest

// optional .crypto.AsymmetricType type = 1;
void PrivateKeyDecryptRequest::clear_type() {
  type_ = 0;
}
 ::crypto::AsymmetricType PrivateKeyDecryptRequest::type() const {
  // @@protoc_insertion_point(field_get:crypto.PrivateKeyDecryptRequest.type)
  return static_cast< ::crypto::AsymmetricType >(type_);
}
 void PrivateKeyDecryptRequest::set_type(::crypto::AsymmetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:crypto.PrivateKeyDecryptRequest.type)
}

// optional string private_key = 2;
void PrivateKeyDecryptRequest::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PrivateKeyDecryptRequest::private_key() const {
  // @@protoc_insertion_point(field_get:crypto.PrivateKeyDecryptRequest.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrivateKeyDecryptRequest::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.PrivateKeyDecryptRequest.private_key)
}
 void PrivateKeyDecryptRequest::set_private_key(const char* value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.PrivateKeyDecryptRequest.private_key)
}
 void PrivateKeyDecryptRequest::set_private_key(const char* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.PrivateKeyDecryptRequest.private_key)
}
 ::std::string* PrivateKeyDecryptRequest::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:crypto.PrivateKeyDecryptRequest.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrivateKeyDecryptRequest::release_private_key() {
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrivateKeyDecryptRequest::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:crypto.PrivateKeyDecryptRequest.private_key)
}

// optional string cipher = 3;
void PrivateKeyDecryptRequest::clear_cipher() {
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PrivateKeyDecryptRequest::cipher() const {
  // @@protoc_insertion_point(field_get:crypto.PrivateKeyDecryptRequest.cipher)
  return cipher_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrivateKeyDecryptRequest::set_cipher(const ::std::string& value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.PrivateKeyDecryptRequest.cipher)
}
 void PrivateKeyDecryptRequest::set_cipher(const char* value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.PrivateKeyDecryptRequest.cipher)
}
 void PrivateKeyDecryptRequest::set_cipher(const char* value, size_t size) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.PrivateKeyDecryptRequest.cipher)
}
 ::std::string* PrivateKeyDecryptRequest::mutable_cipher() {
  
  // @@protoc_insertion_point(field_mutable:crypto.PrivateKeyDecryptRequest.cipher)
  return cipher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrivateKeyDecryptRequest::release_cipher() {
  
  return cipher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrivateKeyDecryptRequest::set_allocated_cipher(::std::string* cipher) {
  if (cipher != NULL) {
    
  } else {
    
  }
  cipher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cipher);
  // @@protoc_insertion_point(field_set_allocated:crypto.PrivateKeyDecryptRequest.cipher)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateKeyDecryptResponse::kPlaintextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateKeyDecryptResponse::PrivateKeyDecryptResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crypto.PrivateKeyDecryptResponse)
}

void PrivateKeyDecryptResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PrivateKeyDecryptResponse::PrivateKeyDecryptResponse(const PrivateKeyDecryptResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crypto.PrivateKeyDecryptResponse)
}

void PrivateKeyDecryptResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  plaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrivateKeyDecryptResponse::~PrivateKeyDecryptResponse() {
  // @@protoc_insertion_point(destructor:crypto.PrivateKeyDecryptResponse)
  SharedDtor();
}

void PrivateKeyDecryptResponse::SharedDtor() {
  plaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PrivateKeyDecryptResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateKeyDecryptResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateKeyDecryptResponse_descriptor_;
}

const PrivateKeyDecryptResponse& PrivateKeyDecryptResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crypto_5fserver_2eproto();
  return *default_instance_;
}

PrivateKeyDecryptResponse* PrivateKeyDecryptResponse::default_instance_ = NULL;

PrivateKeyDecryptResponse* PrivateKeyDecryptResponse::New(::google::protobuf::Arena* arena) const {
  PrivateKeyDecryptResponse* n = new PrivateKeyDecryptResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateKeyDecryptResponse::Clear() {
  plaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrivateKeyDecryptResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crypto.PrivateKeyDecryptResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string plaintext = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plaintext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plaintext().data(), this->plaintext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crypto.PrivateKeyDecryptResponse.plaintext"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crypto.PrivateKeyDecryptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crypto.PrivateKeyDecryptResponse)
  return false;
#undef DO_
}

void PrivateKeyDecryptResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crypto.PrivateKeyDecryptResponse)
  // optional string plaintext = 2;
  if (this->plaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PrivateKeyDecryptResponse.plaintext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->plaintext(), output);
  }

  // @@protoc_insertion_point(serialize_end:crypto.PrivateKeyDecryptResponse)
}

::google::protobuf::uint8* PrivateKeyDecryptResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.PrivateKeyDecryptResponse)
  // optional string plaintext = 2;
  if (this->plaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crypto.PrivateKeyDecryptResponse.plaintext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plaintext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crypto.PrivateKeyDecryptResponse)
  return target;
}

int PrivateKeyDecryptResponse::ByteSize() const {
  int total_size = 0;

  // optional string plaintext = 2;
  if (this->plaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plaintext());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateKeyDecryptResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrivateKeyDecryptResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateKeyDecryptResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateKeyDecryptResponse::MergeFrom(const PrivateKeyDecryptResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.plaintext().size() > 0) {

    plaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plaintext_);
  }
}

void PrivateKeyDecryptResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateKeyDecryptResponse::CopyFrom(const PrivateKeyDecryptResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateKeyDecryptResponse::IsInitialized() const {

  return true;
}

void PrivateKeyDecryptResponse::Swap(PrivateKeyDecryptResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateKeyDecryptResponse::InternalSwap(PrivateKeyDecryptResponse* other) {
  plaintext_.Swap(&other->plaintext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateKeyDecryptResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateKeyDecryptResponse_descriptor_;
  metadata.reflection = PrivateKeyDecryptResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrivateKeyDecryptResponse

// optional string plaintext = 2;
void PrivateKeyDecryptResponse::clear_plaintext() {
  plaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PrivateKeyDecryptResponse::plaintext() const {
  // @@protoc_insertion_point(field_get:crypto.PrivateKeyDecryptResponse.plaintext)
  return plaintext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrivateKeyDecryptResponse::set_plaintext(const ::std::string& value) {
  
  plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crypto.PrivateKeyDecryptResponse.plaintext)
}
 void PrivateKeyDecryptResponse::set_plaintext(const char* value) {
  
  plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crypto.PrivateKeyDecryptResponse.plaintext)
}
 void PrivateKeyDecryptResponse::set_plaintext(const char* value, size_t size) {
  
  plaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crypto.PrivateKeyDecryptResponse.plaintext)
}
 ::std::string* PrivateKeyDecryptResponse::mutable_plaintext() {
  
  // @@protoc_insertion_point(field_mutable:crypto.PrivateKeyDecryptResponse.plaintext)
  return plaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PrivateKeyDecryptResponse::release_plaintext() {
  
  return plaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrivateKeyDecryptResponse::set_allocated_plaintext(::std::string* plaintext) {
  if (plaintext != NULL) {
    
  } else {
    
  }
  plaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaintext);
  // @@protoc_insertion_point(field_set_allocated:crypto.PrivateKeyDecryptResponse.plaintext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace crypto

// @@protoc_insertion_point(global_scope)
