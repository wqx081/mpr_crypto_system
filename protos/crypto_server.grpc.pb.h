// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: crypto_server.proto
// Original file comments:
// @Author: WangQixiang (wangqx at mpreader.com)
// @Date: 2016/08/29
#ifndef GRPC_crypto_5fserver_2eproto__INCLUDED
#define GRPC_crypto_5fserver_2eproto__INCLUDED

#include "crypto_server.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace crypto {

class SymmetricService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateSymmetricKey(::grpc::ClientContext* context, const ::crypto::CreateSymmetricKeyRequest& request, ::crypto::CreateSymmetricKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CreateSymmetricKeyResponse>> AsyncCreateSymmetricKey(::grpc::ClientContext* context, const ::crypto::CreateSymmetricKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CreateSymmetricKeyResponse>>(AsyncCreateSymmetricKeyRaw(context, request, cq));
    }
    // CBC
    virtual ::grpc::Status CbcEncryptFile(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::crypto::CbcEncryptFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcEncryptFileResponse>> AsyncCbcEncryptFile(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcEncryptFileResponse>>(AsyncCbcEncryptFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CbcDecryptFile(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::crypto::CbcDecryptFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcDecryptFileResponse>> AsyncCbcDecryptFile(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcDecryptFileResponse>>(AsyncCbcDecryptFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CbcEncryptString(::grpc::ClientContext* context, const ::crypto::CbcEncryptStringRequest& request, ::crypto::CbcEncryptStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcEncryptStringResponse>> AsyncCbcEncryptString(::grpc::ClientContext* context, const ::crypto::CbcEncryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcEncryptStringResponse>>(AsyncCbcEncryptStringRaw(context, request, cq));
    }
    virtual ::grpc::Status CbcDecryptString(::grpc::ClientContext* context, const ::crypto::CbcDecryptStringRequest& request, ::crypto::CbcDecryptStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcDecryptStringResponse>> AsyncCbcDecryptString(::grpc::ClientContext* context, const ::crypto::CbcDecryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcDecryptStringResponse>>(AsyncCbcDecryptStringRaw(context, request, cq));
    }
    // ECB
    virtual ::grpc::Status EcbEncryptFile(::grpc::ClientContext* context, const ::crypto::EcbEncryptFileRequest& request, ::crypto::EcbEncryptFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbEncryptFileResponse>> AsyncEcbEncryptFile(::grpc::ClientContext* context, const ::crypto::EcbEncryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbEncryptFileResponse>>(AsyncEcbEncryptFileRaw(context, request, cq));
    }
    virtual ::grpc::Status EcbDecryptFile(::grpc::ClientContext* context, const ::crypto::EcbDecryptFileRequest& request, ::crypto::EcbDecryptFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbDecryptFileResponse>> AsyncEcbDecryptFile(::grpc::ClientContext* context, const ::crypto::EcbDecryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbDecryptFileResponse>>(AsyncEcbDecryptFileRaw(context, request, cq));
    }
    virtual ::grpc::Status EcbEncryptString(::grpc::ClientContext* context, const ::crypto::EcbEncryptStringRequest& request, ::crypto::EcbEncryptStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbEncryptStringResponse>> AsyncEcbEncryptString(::grpc::ClientContext* context, const ::crypto::EcbEncryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbEncryptStringResponse>>(AsyncEcbEncryptStringRaw(context, request, cq));
    }
    virtual ::grpc::Status EcbDecryptString(::grpc::ClientContext* context, const ::crypto::EcbDecryptStringRequest& request, ::crypto::EcbDecryptStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbDecryptStringResponse>> AsyncEcbDecryptString(::grpc::ClientContext* context, const ::crypto::EcbDecryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbDecryptStringResponse>>(AsyncEcbDecryptStringRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CreateSymmetricKeyResponse>* AsyncCreateSymmetricKeyRaw(::grpc::ClientContext* context, const ::crypto::CreateSymmetricKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcEncryptFileResponse>* AsyncCbcEncryptFileRaw(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcDecryptFileResponse>* AsyncCbcDecryptFileRaw(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcEncryptStringResponse>* AsyncCbcEncryptStringRaw(::grpc::ClientContext* context, const ::crypto::CbcEncryptStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CbcDecryptStringResponse>* AsyncCbcDecryptStringRaw(::grpc::ClientContext* context, const ::crypto::CbcDecryptStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbEncryptFileResponse>* AsyncEcbEncryptFileRaw(::grpc::ClientContext* context, const ::crypto::EcbEncryptFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbDecryptFileResponse>* AsyncEcbDecryptFileRaw(::grpc::ClientContext* context, const ::crypto::EcbDecryptFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbEncryptStringResponse>* AsyncEcbEncryptStringRaw(::grpc::ClientContext* context, const ::crypto::EcbEncryptStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::EcbDecryptStringResponse>* AsyncEcbDecryptStringRaw(::grpc::ClientContext* context, const ::crypto::EcbDecryptStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSymmetricKey(::grpc::ClientContext* context, const ::crypto::CreateSymmetricKeyRequest& request, ::crypto::CreateSymmetricKeyResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CreateSymmetricKeyResponse>> AsyncCreateSymmetricKey(::grpc::ClientContext* context, const ::crypto::CreateSymmetricKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CreateSymmetricKeyResponse>>(AsyncCreateSymmetricKeyRaw(context, request, cq));
    }
    ::grpc::Status CbcEncryptFile(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::crypto::CbcEncryptFileResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptFileResponse>> AsyncCbcEncryptFile(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptFileResponse>>(AsyncCbcEncryptFileRaw(context, request, cq));
    }
    ::grpc::Status CbcDecryptFile(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::crypto::CbcDecryptFileResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptFileResponse>> AsyncCbcDecryptFile(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptFileResponse>>(AsyncCbcDecryptFileRaw(context, request, cq));
    }
    ::grpc::Status CbcEncryptString(::grpc::ClientContext* context, const ::crypto::CbcEncryptStringRequest& request, ::crypto::CbcEncryptStringResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptStringResponse>> AsyncCbcEncryptString(::grpc::ClientContext* context, const ::crypto::CbcEncryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptStringResponse>>(AsyncCbcEncryptStringRaw(context, request, cq));
    }
    ::grpc::Status CbcDecryptString(::grpc::ClientContext* context, const ::crypto::CbcDecryptStringRequest& request, ::crypto::CbcDecryptStringResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptStringResponse>> AsyncCbcDecryptString(::grpc::ClientContext* context, const ::crypto::CbcDecryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptStringResponse>>(AsyncCbcDecryptStringRaw(context, request, cq));
    }
    ::grpc::Status EcbEncryptFile(::grpc::ClientContext* context, const ::crypto::EcbEncryptFileRequest& request, ::crypto::EcbEncryptFileResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbEncryptFileResponse>> AsyncEcbEncryptFile(::grpc::ClientContext* context, const ::crypto::EcbEncryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbEncryptFileResponse>>(AsyncEcbEncryptFileRaw(context, request, cq));
    }
    ::grpc::Status EcbDecryptFile(::grpc::ClientContext* context, const ::crypto::EcbDecryptFileRequest& request, ::crypto::EcbDecryptFileResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbDecryptFileResponse>> AsyncEcbDecryptFile(::grpc::ClientContext* context, const ::crypto::EcbDecryptFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbDecryptFileResponse>>(AsyncEcbDecryptFileRaw(context, request, cq));
    }
    ::grpc::Status EcbEncryptString(::grpc::ClientContext* context, const ::crypto::EcbEncryptStringRequest& request, ::crypto::EcbEncryptStringResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbEncryptStringResponse>> AsyncEcbEncryptString(::grpc::ClientContext* context, const ::crypto::EcbEncryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbEncryptStringResponse>>(AsyncEcbEncryptStringRaw(context, request, cq));
    }
    ::grpc::Status EcbDecryptString(::grpc::ClientContext* context, const ::crypto::EcbDecryptStringRequest& request, ::crypto::EcbDecryptStringResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbDecryptStringResponse>> AsyncEcbDecryptString(::grpc::ClientContext* context, const ::crypto::EcbDecryptStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::EcbDecryptStringResponse>>(AsyncEcbDecryptStringRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::crypto::CreateSymmetricKeyResponse>* AsyncCreateSymmetricKeyRaw(::grpc::ClientContext* context, const ::crypto::CreateSymmetricKeyRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptFileResponse>* AsyncCbcEncryptFileRaw(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptFileResponse>* AsyncCbcDecryptFileRaw(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptStringResponse>* AsyncCbcEncryptStringRaw(::grpc::ClientContext* context, const ::crypto::CbcEncryptStringRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptStringResponse>* AsyncCbcDecryptStringRaw(::grpc::ClientContext* context, const ::crypto::CbcDecryptStringRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::EcbEncryptFileResponse>* AsyncEcbEncryptFileRaw(::grpc::ClientContext* context, const ::crypto::EcbEncryptFileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::EcbDecryptFileResponse>* AsyncEcbDecryptFileRaw(::grpc::ClientContext* context, const ::crypto::EcbDecryptFileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::EcbEncryptStringResponse>* AsyncEcbEncryptStringRaw(::grpc::ClientContext* context, const ::crypto::EcbEncryptStringRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::EcbDecryptStringResponse>* AsyncEcbDecryptStringRaw(::grpc::ClientContext* context, const ::crypto::EcbDecryptStringRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateSymmetricKey_;
    const ::grpc::RpcMethod rpcmethod_CbcEncryptFile_;
    const ::grpc::RpcMethod rpcmethod_CbcDecryptFile_;
    const ::grpc::RpcMethod rpcmethod_CbcEncryptString_;
    const ::grpc::RpcMethod rpcmethod_CbcDecryptString_;
    const ::grpc::RpcMethod rpcmethod_EcbEncryptFile_;
    const ::grpc::RpcMethod rpcmethod_EcbDecryptFile_;
    const ::grpc::RpcMethod rpcmethod_EcbEncryptString_;
    const ::grpc::RpcMethod rpcmethod_EcbDecryptString_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateSymmetricKey(::grpc::ServerContext* context, const ::crypto::CreateSymmetricKeyRequest* request, ::crypto::CreateSymmetricKeyResponse* response);
    // CBC
    virtual ::grpc::Status CbcEncryptFile(::grpc::ServerContext* context, const ::crypto::CbcEncryptFileRequest* request, ::crypto::CbcEncryptFileResponse* response);
    virtual ::grpc::Status CbcDecryptFile(::grpc::ServerContext* context, const ::crypto::CbcDecryptFileRequest* request, ::crypto::CbcDecryptFileResponse* response);
    virtual ::grpc::Status CbcEncryptString(::grpc::ServerContext* context, const ::crypto::CbcEncryptStringRequest* request, ::crypto::CbcEncryptStringResponse* response);
    virtual ::grpc::Status CbcDecryptString(::grpc::ServerContext* context, const ::crypto::CbcDecryptStringRequest* request, ::crypto::CbcDecryptStringResponse* response);
    // ECB
    virtual ::grpc::Status EcbEncryptFile(::grpc::ServerContext* context, const ::crypto::EcbEncryptFileRequest* request, ::crypto::EcbEncryptFileResponse* response);
    virtual ::grpc::Status EcbDecryptFile(::grpc::ServerContext* context, const ::crypto::EcbDecryptFileRequest* request, ::crypto::EcbDecryptFileResponse* response);
    virtual ::grpc::Status EcbEncryptString(::grpc::ServerContext* context, const ::crypto::EcbEncryptStringRequest* request, ::crypto::EcbEncryptStringResponse* response);
    virtual ::grpc::Status EcbDecryptString(::grpc::ServerContext* context, const ::crypto::EcbDecryptStringRequest* request, ::crypto::EcbDecryptStringResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSymmetricKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSymmetricKey() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSymmetricKey() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSymmetricKey(::grpc::ServerContext* context, const ::crypto::CreateSymmetricKeyRequest* request, ::crypto::CreateSymmetricKeyResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSymmetricKey(::grpc::ServerContext* context, ::crypto::CreateSymmetricKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::CreateSymmetricKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CbcEncryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CbcEncryptFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CbcEncryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcEncryptFile(::grpc::ServerContext* context, const ::crypto::CbcEncryptFileRequest* request, ::crypto::CbcEncryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCbcEncryptFile(::grpc::ServerContext* context, ::crypto::CbcEncryptFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::CbcEncryptFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CbcDecryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CbcDecryptFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CbcDecryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcDecryptFile(::grpc::ServerContext* context, const ::crypto::CbcDecryptFileRequest* request, ::crypto::CbcDecryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCbcDecryptFile(::grpc::ServerContext* context, ::crypto::CbcDecryptFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::CbcDecryptFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CbcEncryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CbcEncryptString() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CbcEncryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcEncryptString(::grpc::ServerContext* context, const ::crypto::CbcEncryptStringRequest* request, ::crypto::CbcEncryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCbcEncryptString(::grpc::ServerContext* context, ::crypto::CbcEncryptStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::CbcEncryptStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CbcDecryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CbcDecryptString() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CbcDecryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcDecryptString(::grpc::ServerContext* context, const ::crypto::CbcDecryptStringRequest* request, ::crypto::CbcDecryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCbcDecryptString(::grpc::ServerContext* context, ::crypto::CbcDecryptStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::CbcDecryptStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EcbEncryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EcbEncryptFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_EcbEncryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbEncryptFile(::grpc::ServerContext* context, const ::crypto::EcbEncryptFileRequest* request, ::crypto::EcbEncryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcbEncryptFile(::grpc::ServerContext* context, ::crypto::EcbEncryptFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::EcbEncryptFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EcbDecryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EcbDecryptFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_EcbDecryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbDecryptFile(::grpc::ServerContext* context, const ::crypto::EcbDecryptFileRequest* request, ::crypto::EcbDecryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcbDecryptFile(::grpc::ServerContext* context, ::crypto::EcbDecryptFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::EcbDecryptFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EcbEncryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EcbEncryptString() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_EcbEncryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbEncryptString(::grpc::ServerContext* context, const ::crypto::EcbEncryptStringRequest* request, ::crypto::EcbEncryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcbEncryptString(::grpc::ServerContext* context, ::crypto::EcbEncryptStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::EcbEncryptStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EcbDecryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EcbDecryptString() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_EcbDecryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbDecryptString(::grpc::ServerContext* context, const ::crypto::EcbDecryptStringRequest* request, ::crypto::EcbDecryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcbDecryptString(::grpc::ServerContext* context, ::crypto::EcbDecryptStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::EcbDecryptStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSymmetricKey<WithAsyncMethod_CbcEncryptFile<WithAsyncMethod_CbcDecryptFile<WithAsyncMethod_CbcEncryptString<WithAsyncMethod_CbcDecryptString<WithAsyncMethod_EcbEncryptFile<WithAsyncMethod_EcbDecryptFile<WithAsyncMethod_EcbEncryptString<WithAsyncMethod_EcbDecryptString<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSymmetricKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSymmetricKey() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSymmetricKey() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSymmetricKey(::grpc::ServerContext* context, const ::crypto::CreateSymmetricKeyRequest* request, ::crypto::CreateSymmetricKeyResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CbcEncryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CbcEncryptFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CbcEncryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcEncryptFile(::grpc::ServerContext* context, const ::crypto::CbcEncryptFileRequest* request, ::crypto::CbcEncryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CbcDecryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CbcDecryptFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CbcDecryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcDecryptFile(::grpc::ServerContext* context, const ::crypto::CbcDecryptFileRequest* request, ::crypto::CbcDecryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CbcEncryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CbcEncryptString() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CbcEncryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcEncryptString(::grpc::ServerContext* context, const ::crypto::CbcEncryptStringRequest* request, ::crypto::CbcEncryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CbcDecryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CbcDecryptString() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CbcDecryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CbcDecryptString(::grpc::ServerContext* context, const ::crypto::CbcDecryptStringRequest* request, ::crypto::CbcDecryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EcbEncryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EcbEncryptFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_EcbEncryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbEncryptFile(::grpc::ServerContext* context, const ::crypto::EcbEncryptFileRequest* request, ::crypto::EcbEncryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EcbDecryptFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EcbDecryptFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_EcbDecryptFile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbDecryptFile(::grpc::ServerContext* context, const ::crypto::EcbDecryptFileRequest* request, ::crypto::EcbDecryptFileResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EcbEncryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EcbEncryptString() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_EcbEncryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbEncryptString(::grpc::ServerContext* context, const ::crypto::EcbEncryptStringRequest* request, ::crypto::EcbEncryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EcbDecryptString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EcbDecryptString() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_EcbDecryptString() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EcbDecryptString(::grpc::ServerContext* context, const ::crypto::EcbDecryptStringRequest* request, ::crypto::EcbDecryptStringResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class AsymmetricService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateKeyPair(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::crypto::CreateKeyPairResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CreateKeyPairResponse>> AsyncCreateKeyPair(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CreateKeyPairResponse>>(AsyncCreateKeyPairRaw(context, request, cq));
    }
    virtual ::grpc::Status PublicKeyEncrypt(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::crypto::PublicKeyEncryptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::PublicKeyEncryptResponse>> AsyncPublicKeyEncrypt(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::PublicKeyEncryptResponse>>(AsyncPublicKeyEncryptRaw(context, request, cq));
    }
    virtual ::grpc::Status PrivateKeyDecrypt(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::crypto::PrivateKeyDecryptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::PrivateKeyDecryptResponse>> AsyncPrivateKeyDecrypt(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crypto::PrivateKeyDecryptResponse>>(AsyncPrivateKeyDecryptRaw(context, request, cq));
    }
    // TODO(wqx):
    // signature & verify
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::CreateKeyPairResponse>* AsyncCreateKeyPairRaw(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::PublicKeyEncryptResponse>* AsyncPublicKeyEncryptRaw(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crypto::PrivateKeyDecryptResponse>* AsyncPrivateKeyDecryptRaw(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateKeyPair(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::crypto::CreateKeyPairResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CreateKeyPairResponse>> AsyncCreateKeyPair(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::CreateKeyPairResponse>>(AsyncCreateKeyPairRaw(context, request, cq));
    }
    ::grpc::Status PublicKeyEncrypt(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::crypto::PublicKeyEncryptResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::PublicKeyEncryptResponse>> AsyncPublicKeyEncrypt(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::PublicKeyEncryptResponse>>(AsyncPublicKeyEncryptRaw(context, request, cq));
    }
    ::grpc::Status PrivateKeyDecrypt(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::crypto::PrivateKeyDecryptResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::PrivateKeyDecryptResponse>> AsyncPrivateKeyDecrypt(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crypto::PrivateKeyDecryptResponse>>(AsyncPrivateKeyDecryptRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::crypto::CreateKeyPairResponse>* AsyncCreateKeyPairRaw(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::PublicKeyEncryptResponse>* AsyncPublicKeyEncryptRaw(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::crypto::PrivateKeyDecryptResponse>* AsyncPrivateKeyDecryptRaw(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateKeyPair_;
    const ::grpc::RpcMethod rpcmethod_PublicKeyEncrypt_;
    const ::grpc::RpcMethod rpcmethod_PrivateKeyDecrypt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateKeyPair(::grpc::ServerContext* context, const ::crypto::CreateKeyPairRequest* request, ::crypto::CreateKeyPairResponse* response);
    virtual ::grpc::Status PublicKeyEncrypt(::grpc::ServerContext* context, const ::crypto::PublicKeyEncryptRequest* request, ::crypto::PublicKeyEncryptResponse* response);
    virtual ::grpc::Status PrivateKeyDecrypt(::grpc::ServerContext* context, const ::crypto::PrivateKeyDecryptRequest* request, ::crypto::PrivateKeyDecryptResponse* response);
    // TODO(wqx):
    // signature & verify
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateKeyPair() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateKeyPair() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateKeyPair(::grpc::ServerContext* context, const ::crypto::CreateKeyPairRequest* request, ::crypto::CreateKeyPairResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateKeyPair(::grpc::ServerContext* context, ::crypto::CreateKeyPairRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::CreateKeyPairResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublicKeyEncrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PublicKeyEncrypt() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PublicKeyEncrypt() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicKeyEncrypt(::grpc::ServerContext* context, const ::crypto::PublicKeyEncryptRequest* request, ::crypto::PublicKeyEncryptResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublicKeyEncrypt(::grpc::ServerContext* context, ::crypto::PublicKeyEncryptRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::PublicKeyEncryptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrivateKeyDecrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PrivateKeyDecrypt() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PrivateKeyDecrypt() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrivateKeyDecrypt(::grpc::ServerContext* context, const ::crypto::PrivateKeyDecryptRequest* request, ::crypto::PrivateKeyDecryptResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrivateKeyDecrypt(::grpc::ServerContext* context, ::crypto::PrivateKeyDecryptRequest* request, ::grpc::ServerAsyncResponseWriter< ::crypto::PrivateKeyDecryptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateKeyPair<WithAsyncMethod_PublicKeyEncrypt<WithAsyncMethod_PrivateKeyDecrypt<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateKeyPair() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateKeyPair() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateKeyPair(::grpc::ServerContext* context, const ::crypto::CreateKeyPairRequest* request, ::crypto::CreateKeyPairResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublicKeyEncrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PublicKeyEncrypt() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PublicKeyEncrypt() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicKeyEncrypt(::grpc::ServerContext* context, const ::crypto::PublicKeyEncryptRequest* request, ::crypto::PublicKeyEncryptResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrivateKeyDecrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PrivateKeyDecrypt() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PrivateKeyDecrypt() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrivateKeyDecrypt(::grpc::ServerContext* context, const ::crypto::PrivateKeyDecryptRequest* request, ::crypto::PrivateKeyDecryptResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace crypto


#endif  // GRPC_crypto_5fserver_2eproto__INCLUDED
