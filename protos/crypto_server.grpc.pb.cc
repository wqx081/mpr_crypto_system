// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: crypto_server.proto

#include "crypto_server.pb.h"
#include "crypto_server.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace crypto {

static const char* SymmetricService_method_names[] = {
  "/crypto.SymmetricService/CreateCbcKey",
  "/crypto.SymmetricService/CbcEncryptFile",
  "/crypto.SymmetricService/CbcDecryptFile",
};

std::unique_ptr< SymmetricService::Stub> SymmetricService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SymmetricService::Stub> stub(new SymmetricService::Stub(channel));
  return stub;
}

SymmetricService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateCbcKey_(SymmetricService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CbcEncryptFile_(SymmetricService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CbcDecryptFile_(SymmetricService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SymmetricService::Stub::CreateCbcKey(::grpc::ClientContext* context, const ::crypto::CreateCbcKeyRequest& request, ::crypto::CreateCbcKeyResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCbcKey_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crypto::CreateCbcKeyResponse>* SymmetricService::Stub::AsyncCreateCbcKeyRaw(::grpc::ClientContext* context, const ::crypto::CreateCbcKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crypto::CreateCbcKeyResponse>(channel_.get(), cq, rpcmethod_CreateCbcKey_, context, request);
}

::grpc::Status SymmetricService::Stub::CbcEncryptFile(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::crypto::CbcEncryptFileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CbcEncryptFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptFileResponse>* SymmetricService::Stub::AsyncCbcEncryptFileRaw(::grpc::ClientContext* context, const ::crypto::CbcEncryptFileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crypto::CbcEncryptFileResponse>(channel_.get(), cq, rpcmethod_CbcEncryptFile_, context, request);
}

::grpc::Status SymmetricService::Stub::CbcDecryptFile(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::crypto::CbcDecryptFileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CbcDecryptFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptFileResponse>* SymmetricService::Stub::AsyncCbcDecryptFileRaw(::grpc::ClientContext* context, const ::crypto::CbcDecryptFileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crypto::CbcDecryptFileResponse>(channel_.get(), cq, rpcmethod_CbcDecryptFile_, context, request);
}

SymmetricService::Service::Service() {
  (void)SymmetricService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      SymmetricService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SymmetricService::Service, ::crypto::CreateCbcKeyRequest, ::crypto::CreateCbcKeyResponse>(
          std::mem_fn(&SymmetricService::Service::CreateCbcKey), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SymmetricService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SymmetricService::Service, ::crypto::CbcEncryptFileRequest, ::crypto::CbcEncryptFileResponse>(
          std::mem_fn(&SymmetricService::Service::CbcEncryptFile), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SymmetricService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SymmetricService::Service, ::crypto::CbcDecryptFileRequest, ::crypto::CbcDecryptFileResponse>(
          std::mem_fn(&SymmetricService::Service::CbcDecryptFile), this)));
}

SymmetricService::Service::~Service() {
}

::grpc::Status SymmetricService::Service::CreateCbcKey(::grpc::ServerContext* context, const ::crypto::CreateCbcKeyRequest* request, ::crypto::CreateCbcKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SymmetricService::Service::CbcEncryptFile(::grpc::ServerContext* context, const ::crypto::CbcEncryptFileRequest* request, ::crypto::CbcEncryptFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SymmetricService::Service::CbcDecryptFile(::grpc::ServerContext* context, const ::crypto::CbcDecryptFileRequest* request, ::crypto::CbcDecryptFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AsymmetricService_method_names[] = {
  "/crypto.AsymmetricService/CreateKeyPair",
  "/crypto.AsymmetricService/PublicKeyEncrypt",
  "/crypto.AsymmetricService/PrivateKeyDecrypt",
};

std::unique_ptr< AsymmetricService::Stub> AsymmetricService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< AsymmetricService::Stub> stub(new AsymmetricService::Stub(channel));
  return stub;
}

AsymmetricService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateKeyPair_(AsymmetricService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublicKeyEncrypt_(AsymmetricService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrivateKeyDecrypt_(AsymmetricService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AsymmetricService::Stub::CreateKeyPair(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::crypto::CreateKeyPairResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateKeyPair_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crypto::CreateKeyPairResponse>* AsymmetricService::Stub::AsyncCreateKeyPairRaw(::grpc::ClientContext* context, const ::crypto::CreateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crypto::CreateKeyPairResponse>(channel_.get(), cq, rpcmethod_CreateKeyPair_, context, request);
}

::grpc::Status AsymmetricService::Stub::PublicKeyEncrypt(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::crypto::PublicKeyEncryptResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PublicKeyEncrypt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crypto::PublicKeyEncryptResponse>* AsymmetricService::Stub::AsyncPublicKeyEncryptRaw(::grpc::ClientContext* context, const ::crypto::PublicKeyEncryptRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crypto::PublicKeyEncryptResponse>(channel_.get(), cq, rpcmethod_PublicKeyEncrypt_, context, request);
}

::grpc::Status AsymmetricService::Stub::PrivateKeyDecrypt(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::crypto::PrivateKeyDecryptResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PrivateKeyDecrypt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crypto::PrivateKeyDecryptResponse>* AsymmetricService::Stub::AsyncPrivateKeyDecryptRaw(::grpc::ClientContext* context, const ::crypto::PrivateKeyDecryptRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crypto::PrivateKeyDecryptResponse>(channel_.get(), cq, rpcmethod_PrivateKeyDecrypt_, context, request);
}

AsymmetricService::Service::Service() {
  (void)AsymmetricService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      AsymmetricService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< AsymmetricService::Service, ::crypto::CreateKeyPairRequest, ::crypto::CreateKeyPairResponse>(
          std::mem_fn(&AsymmetricService::Service::CreateKeyPair), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      AsymmetricService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< AsymmetricService::Service, ::crypto::PublicKeyEncryptRequest, ::crypto::PublicKeyEncryptResponse>(
          std::mem_fn(&AsymmetricService::Service::PublicKeyEncrypt), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      AsymmetricService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< AsymmetricService::Service, ::crypto::PrivateKeyDecryptRequest, ::crypto::PrivateKeyDecryptResponse>(
          std::mem_fn(&AsymmetricService::Service::PrivateKeyDecrypt), this)));
}

AsymmetricService::Service::~Service() {
}

::grpc::Status AsymmetricService::Service::CreateKeyPair(::grpc::ServerContext* context, const ::crypto::CreateKeyPairRequest* request, ::crypto::CreateKeyPairResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AsymmetricService::Service::PublicKeyEncrypt(::grpc::ServerContext* context, const ::crypto::PublicKeyEncryptRequest* request, ::crypto::PublicKeyEncryptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AsymmetricService::Service::PrivateKeyDecrypt(::grpc::ServerContext* context, const ::crypto::PrivateKeyDecryptRequest* request, ::crypto::PrivateKeyDecryptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace crypto

